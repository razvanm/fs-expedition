
R version 2.8.1 (2008-12-22)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> my.colors <- rainbow(58)
> d <- read.table('heatmapall', head=T)
> 
> method = "complete"
> h <- hclust(as.dist(rev(d)), method)
> n <- length(h$labels)
> h$x <- h$order
> h$y <- rep(0, n)
> h$fs <- factor(unlist(lapply(strsplit(h$labels, '-'), function(x) { x[1] })))
> for (i in 1:length(h$height)) {
+   m <- h$merge[i,]
+   if (m[1] < 0) h$y[-m[1]] <- h$height[i]
+   if (m[2] < 0) h$y[-m[2]] <- h$height[i]
+ }
> 
> scale.alpha <- 1/(max(h$x)+1) * 1.99*pi
> offset.r <- max(h$height) 
> h$r <- offset.r - h$y
> h$alpha <- h$x*scale.alpha
> 
> radius <- max(h$height)*1
> print(radius)
[1] 443
> 
> png(paste('circos', method, 'png', sep='.'), width=800, height=800, type='cairo', antialias='subpixel')
> 
> par(mar=c(1,1,1,1))
> plot(h$r*sin(h$alpha), h$r*cos(h$alpha), xlim=c(-radius, radius), ylim=c(-radius, radius), type='n', ann=F, axes=F)
> #text(radius*sin(h$alpha), radius*cos(h$alpha), h$label, adj=c(0.5, 0.5), srt=0)
> r <- radius-40
> rs <- max(h$r)
> for (i in 1:nrow(d)) {
+   i <- h$order[i]
+   alpha <-  - h$alpha[i]/2/pi*360 + 90
+   adjx <- 0
+   if (alpha < -90) {
+     alpha <- alpha + 180
+     adjx <- 1
+   }
+   r <- h$r[i] + 15
+   #points(radius*sin(h$alpha[i]), radius*cos(h$alpha[i]), pch=20, cex=0.8, col=my.colors[h$fs[i]])
+ #  segments((radius-5)*sin(h$alpha[i]), (radius-5)*cos(h$alpha[i]),
+ #           (radius-10)*sin(h$alpha[i]), (radius-10)*cos(h$alpha[i]), col=my.colors[h$fs[i]], lwd=5)
+   par(ps=8)
+ #  text(radius*sin(h$alpha[i]), radius*cos(h$alpha[i]), h$label[i], adj=c(adjx, 0.4), srt=alpha, family='DejaVu Sans Condensed')
+   #segments(h$r[i]*sin(h$alpha[i]), h$r[i]*cos(h$alpha[i]), rs*sin(h$alpha[i]), rs*cos(h$alpha[i]), lwd=0.5, col='grey')
+ }
> 
> for (i in 1:length(h$height)) {
+   m <- h$merge[i,]
+   l <- data.frame(x0=c(0, 0, 0), y0=c(0, 0, 0), x1=c(0, 0, 0), y1=c(0, 0, 0))
+ 
+   if (m[1] < 0) {
+     l$x0[1] <- which(h$order == -m[1])
+     l$y0[1] <- 0
+   } else {
+     l$x0[1] <- h$mid[m[1]]
+     l$y0[1] <- h$height[m[1]]
+   }
+   l$x1[1] <- l$x0[1]
+   l$y1[1] <- h$height[i]
+ 
+   if (m[2] < 0) {
+     l$x0[2] <- which(h$order == -m[2])
+     l$y0[2] <- 0
+   } else {
+     l$x0[2] <- h$mid[m[2]]
+     l$y0[2] <- h$height[m[2]]
+   }
+   l$x1[2] <- l$x0[2]
+   l$y1[2] <- h$height[i]
+ 
+   l$x0[3] <- l$x1[1]
+   l$y0[3] <- l$y1[1]
+   l$x1[3] <- l$x1[2]
+   l$y1[3] <- l$y1[2]
+   
+   h$mid[i] <- (l$x0[1] + l$x0[2])/2
+ 
+   print(i)
+   print(m)
+   print(l)
+   print(h$mid[i])
+   
+   segments(l$r0*sin(l$alpha0), l$r0*cos(l$alpha0), l$r1*sin(l$alpha1), l$r1*cos(l$alpha1), lwd=1)
+ 
+   alpha0 <- l$x0[1]*scale.alpha
+   alpha1 <- l$x0[2]*scale.alpha
+ 
+   inc <- 2*pi/200
+   if (alpha0 > alpha1) inc <- -inc
+   a <- c(seq(alpha0, alpha1, inc), alpha1)
+   r <- h$height[i]
+   lines(r*sin(a), r*cos(a), lwd=1)
+ }
[1] 1
[1] -1 -2
   x0 y0  x1 y1
1 684  0 684  0
2 685  0 685  0
3 684  0 685  0
[1] 684.5
